#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

vector<int> edges[10000];
bool used[1001];
void dfs(int start);
void bfs(int start);

int main() {
	int N, M, V;	// N:정점의수 M:간선의수 V:출발점

	cin >> N >> M >> V;

	for (int i = 0; i < 1001; i++)	//방문여부판단 used 를 초기화
		used[i] = false;

	for (int i = 0; i < M; i++) {
		int start, end;
		cin >> start >> end;
		edges[start].push_back(end);
		edges[end].push_back(start);
	}
	//정렬 해야함
	for (int i = 0; i < M; i++) {
		sort(edges[i].begin(), edges[i].end()); //트리가 낮은수부터 생겨나기때문에?
	}

	dfs(V);
	cout << endl;
	for (int i = 0; i < 1001; i++)
		used[i] = false;

	bfs(V);
}

void dfs(int start) {

	if (!used[start]) cout << start << " "; //현재 지점을 방문하지 않았으면 출력 후 방문했다고 표시
	used[start] = true;

	vector<int>::iterator it;
	for (it = edges[start].begin(); it != edges[start].end(); it++) { // 해당 점에 연결된 모든 점들을 가면서 방문안했다면 dfs로 다시재귀
		if (used[*it] == false) {
			dfs(*it);
		}
	}

}

void bfs(int start) {
	queue<int> Q;

	Q.push(start);
	used[Q.front()] = true;

	while (!Q.empty()) {
		int temp = Q.front();
		Q.pop();
		cout << temp << " ";
		vector<int>::iterator it;
		for (it = edges[temp].begin(); it != edges[temp].end(); it++) {
			if (used[*it] == false) {
				Q.push(*it);
				used[*it] = true;
			}
		}
	}
}
